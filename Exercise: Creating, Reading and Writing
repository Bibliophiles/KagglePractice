{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7cb72053",
   "metadata": {
    "papermill": {
     "duration": 0.00792,
     "end_time": "2024-09-28T03:50:03.325466",
     "exception": false,
     "start_time": "2024-09-28T03:50:03.317546",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**This notebook is an exercise in the [Pandas](https://www.kaggle.com/learn/pandas) course.  You can reference the tutorial at [this link](https://www.kaggle.com/residentmario/creating-reading-and-writing).**\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "847b8aba",
   "metadata": {
    "papermill": {
     "duration": 0.006539,
     "end_time": "2024-09-28T03:50:03.339115",
     "exception": false,
     "start_time": "2024-09-28T03:50:03.332576",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction\n",
    "\n",
    "The first step in most data analytics projects is reading the data file. In this exercise, you'll create Series and DataFrame objects, both by hand and by reading data files.\n",
    "\n",
    "Run the code cell below to load libraries you will need (including code to check your answers)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "18b0d066",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T03:50:03.354848Z",
     "iopub.status.busy": "2024-09-28T03:50:03.354330Z",
     "iopub.status.idle": "2024-09-28T03:50:06.169994Z",
     "shell.execute_reply": "2024-09-28T03:50:06.168288Z"
    },
    "papermill": {
     "duration": 2.827113,
     "end_time": "2024-09-28T03:50:06.172941",
     "exception": false,
     "start_time": "2024-09-28T03:50:03.345828",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setup complete.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "pd.set_option('display.max_rows', 5)\n",
    "from learntools.core import binder; binder.bind(globals())\n",
    "from learntools.pandas.creating_reading_and_writing import *\n",
    "print(\"Setup complete.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08347622",
   "metadata": {
    "papermill": {
     "duration": 0.006777,
     "end_time": "2024-09-28T03:50:06.187126",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.180349",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cbe0270",
   "metadata": {
    "papermill": {
     "duration": 0.006756,
     "end_time": "2024-09-28T03:50:06.200877",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.194121",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1.\n",
    "\n",
    "In the cell below, create a DataFrame `fruits` that looks like this:\n",
    "\n",
    "![](https://storage.googleapis.com/kaggle-media/learn/images/Ax3pp2A.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bb9d0468",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T03:50:06.217214Z",
     "iopub.status.busy": "2024-09-28T03:50:06.216340Z",
     "iopub.status.idle": "2024-09-28T03:50:06.240159Z",
     "shell.execute_reply": "2024-09-28T03:50:06.238750Z"
    },
    "papermill": {
     "duration": 0.035058,
     "end_time": "2024-09-28T03:50:06.242905",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.207847",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"1_FruitDfCreation\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Apples</th>\n",
       "      <th>Bananas</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Apples  Bananas\n",
       "0      30       21"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Your code goes here. Create a dataframe matching the above diagram and assign it to the variable fruits.\n",
    "data = {\n",
    "    \"Apples\": [30],\n",
    "    \"Bananas\": [21]\n",
    "}\n",
    "\n",
    "fruits = pd.DataFrame(data)\n",
    "\n",
    "# Check your answer\n",
    "q1.check()\n",
    "fruits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9ee18cb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T03:50:06.260779Z",
     "iopub.status.busy": "2024-09-28T03:50:06.259762Z",
     "iopub.status.idle": "2024-09-28T03:50:06.264959Z",
     "shell.execute_reply": "2024-09-28T03:50:06.263777Z"
    },
    "papermill": {
     "duration": 0.016896,
     "end_time": "2024-09-28T03:50:06.267688",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.250792",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q1.hint()\n",
    "#q1.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c41e1fcb",
   "metadata": {
    "papermill": {
     "duration": 0.008355,
     "end_time": "2024-09-28T03:50:06.283745",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.275390",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2.\n",
    "\n",
    "Create a dataframe `fruit_sales` that matches the diagram below:\n",
    "\n",
    "![](https://storage.googleapis.com/kaggle-media/learn/images/CHPn7ZF.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0613f8ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T03:50:06.301724Z",
     "iopub.status.busy": "2024-09-28T03:50:06.301216Z",
     "iopub.status.idle": "2024-09-28T03:50:06.318931Z",
     "shell.execute_reply": "2024-09-28T03:50:06.317732Z"
    },
    "papermill": {
     "duration": 0.029604,
     "end_time": "2024-09-28T03:50:06.321483",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.291879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"2_FruitSalesDfCreation\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Apples</th>\n",
       "      <th>Bananas</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017 Sales</th>\n",
       "      <td>35</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018 Sales</th>\n",
       "      <td>41</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Apples  Bananas\n",
       "2017 Sales      35       21\n",
       "2018 Sales      41       34"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Your code goes here. Create a dataframe matching the above diagram and assign it to the variable fruit_sales.\n",
    "fruits = {\n",
    "    \"Apples\": [35,41],\n",
    "    \"Bananas\": [21,34]\n",
    "}\n",
    "\n",
    "fruit_sales = pd.DataFrame(fruits, index = [\"2017 Sales\",\"2018 Sales\"])\n",
    "\n",
    "\n",
    "# Check your answer\n",
    "q2.check()\n",
    "fruit_sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c6d5e1ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T03:50:06.340971Z",
     "iopub.status.busy": "2024-09-28T03:50:06.340462Z",
     "iopub.status.idle": "2024-09-28T03:50:06.345857Z",
     "shell.execute_reply": "2024-09-28T03:50:06.344682Z"
    },
    "papermill": {
     "duration": 0.018573,
     "end_time": "2024-09-28T03:50:06.348414",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.329841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q2.hint()\n",
    "#q2.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8f3ff55",
   "metadata": {
    "papermill": {
     "duration": 0.00803,
     "end_time": "2024-09-28T03:50:06.364721",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.356691",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3.\n",
    "\n",
    "Create a variable `ingredients` with a Series that looks like:\n",
    "\n",
    "```\n",
    "Flour     4 cups\n",
    "Milk       1 cup\n",
    "Eggs     2 large\n",
    "Spam       1 can\n",
    "Name: Dinner, dtype: object\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c0291a83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T03:50:06.383387Z",
     "iopub.status.busy": "2024-09-28T03:50:06.382881Z",
     "iopub.status.idle": "2024-09-28T03:50:06.398632Z",
     "shell.execute_reply": "2024-09-28T03:50:06.397493Z"
    },
    "papermill": {
     "duration": 0.028072,
     "end_time": "2024-09-28T03:50:06.401008",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.372936",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_RecipeSeriesCreation\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#33cc33\">Correct</span>"
      ],
      "text/plain": [
       "Correct"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Flour     4 cups\n",
       "Milk       1 cup\n",
       "Eggs     2 large\n",
       "Spam       1 can\n",
       "Name: Dinner, dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ingr = {\n",
    "    \"Flour\": \"4 cups\",\n",
    "    \"Milk\": \"1 cup\",\n",
    "    \"Eggs\": \"2 large\",\n",
    "    \"Spam\": \"1 can\",\n",
    "}\n",
    "\n",
    "ingredients = pd.Series(ingr, name = \"Dinner\")\n",
    "\n",
    "# Check your answer\n",
    "q3.check()\n",
    "ingredients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e9444a19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T03:50:06.421864Z",
     "iopub.status.busy": "2024-09-28T03:50:06.420862Z",
     "iopub.status.idle": "2024-09-28T03:50:06.426199Z",
     "shell.execute_reply": "2024-09-28T03:50:06.424963Z"
    },
    "papermill": {
     "duration": 0.018422,
     "end_time": "2024-09-28T03:50:06.428717",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.410295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q3.hint()\n",
    "#q3.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69c55885",
   "metadata": {
    "papermill": {
     "duration": 0.008687,
     "end_time": "2024-09-28T03:50:06.446269",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.437582",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4.\n",
    "\n",
    "Read the following csv dataset of wine reviews into a DataFrame called `reviews`:\n",
    "\n",
    "![](https://storage.googleapis.com/kaggle-media/learn/images/74RCZtU.png)\n",
    "\n",
    "The filepath to the csv file is `../input/wine-reviews/winemag-data_first150k.csv`. The first few lines look like:\n",
    "\n",
    "```\n",
    ",country,description,designation,points,price,province,region_1,region_2,variety,winery\n",
    "0,US,\"This tremendous 100% varietal wine[...]\",Martha's Vineyard,96,235.0,California,Napa Valley,Napa,Cabernet Sauvignon,Heitz\n",
    "1,Spain,\"Ripe aromas of fig, blackberry and[...]\",Carodorum Selección Especial Reserva,96,110.0,Northern Spain,Toro,,Tinta de Toro,Bodega Carmen Rodríguez\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7df613dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T03:50:06.466078Z",
     "iopub.status.busy": "2024-09-28T03:50:06.465625Z",
     "iopub.status.idle": "2024-09-28T03:50:06.477618Z",
     "shell.execute_reply": "2024-09-28T03:50:06.476410Z"
    },
    "papermill": {
     "duration": 0.02529,
     "end_time": "2024-09-28T03:50:06.480401",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.455111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 4, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"4_ReadWineCsv\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#ccaa33\">Check:</span> When you've updated the starter code, `check()` will tell you whether your code is correct. You need to update the code that creates variable `reviews`"
      ],
      "text/plain": [
       "Check: When you've updated the starter code, `check()` will tell you whether your code is correct. You need to update the code that creates variable `reviews`"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [],
      "text/plain": [
       "<learntools.core.constants.PlaceholderValue at 0x7de4d4ec0820>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews = ____\n",
    "\n",
    "# Check your answer\n",
    "q4.check()\n",
    "reviews"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "50f5410d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T03:50:06.503168Z",
     "iopub.status.busy": "2024-09-28T03:50:06.502191Z",
     "iopub.status.idle": "2024-09-28T03:50:06.507773Z",
     "shell.execute_reply": "2024-09-28T03:50:06.506405Z"
    },
    "papermill": {
     "duration": 0.019411,
     "end_time": "2024-09-28T03:50:06.510543",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.491132",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q4.hint()\n",
    "#q4.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dc65bb2",
   "metadata": {
    "papermill": {
     "duration": 0.009615,
     "end_time": "2024-09-28T03:50:06.530066",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.520451",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5.\n",
    "\n",
    "Run the cell below to create and display a DataFrame called `animals`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f835fc9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T03:50:06.551912Z",
     "iopub.status.busy": "2024-09-28T03:50:06.551399Z",
     "iopub.status.idle": "2024-09-28T03:50:06.564435Z",
     "shell.execute_reply": "2024-09-28T03:50:06.563155Z"
    },
    "papermill": {
     "duration": 0.027205,
     "end_time": "2024-09-28T03:50:06.567145",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.539940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cows</th>\n",
       "      <th>Goats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Year 1</th>\n",
       "      <td>12</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year 2</th>\n",
       "      <td>20</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Cows  Goats\n",
       "Year 1    12     22\n",
       "Year 2    20     19"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "animals = pd.DataFrame({'Cows': [12, 20], 'Goats': [22, 19]}, index=['Year 1', 'Year 2'])\n",
    "animals"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a539c16",
   "metadata": {
    "papermill": {
     "duration": 0.009592,
     "end_time": "2024-09-28T03:50:06.586536",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.576944",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In the cell below, write code to save this DataFrame to disk as a csv file with the name `cows_and_goats.csv`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b69a808f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T03:50:06.608415Z",
     "iopub.status.busy": "2024-09-28T03:50:06.608002Z",
     "iopub.status.idle": "2024-09-28T03:50:06.618042Z",
     "shell.execute_reply": "2024-09-28T03:50:06.617014Z"
    },
    "papermill": {
     "duration": 0.024007,
     "end_time": "2024-09-28T03:50:06.620590",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.596583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 2, \"failureMessage\": \"Expected file to exist with name `cows_and_goats.csv`\", \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"5_SaveAnimalsCsv\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "<span style=\"color:#cc3333\">Incorrect:</span> Expected file to exist with name `cows_and_goats.csv`"
      ],
      "text/plain": [
       "Incorrect: Expected file to exist with name `cows_and_goats.csv`"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Your code goes here\n",
    "\n",
    "# Check your answer\n",
    "q5.check()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c8c7bf59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-28T03:50:06.643569Z",
     "iopub.status.busy": "2024-09-28T03:50:06.643100Z",
     "iopub.status.idle": "2024-09-28T03:50:06.647892Z",
     "shell.execute_reply": "2024-09-28T03:50:06.646810Z"
    },
    "papermill": {
     "duration": 0.019356,
     "end_time": "2024-09-28T03:50:06.650349",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.630993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#q5.hint()\n",
    "#q5.solution()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "660ae94b",
   "metadata": {
    "papermill": {
     "duration": 0.010239,
     "end_time": "2024-09-28T03:50:06.671268",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.661029",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Keep going\n",
    "\n",
    "Move on to learn about **[indexing, selecting and assigning](https://www.kaggle.com/residentmario/indexing-selecting-assigning)**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e8b3ad2",
   "metadata": {
    "papermill": {
     "duration": 0.010243,
     "end_time": "2024-09-28T03:50:06.692111",
     "exception": false,
     "start_time": "2024-09-28T03:50:06.681868",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/pandas/discussion) to chat with other learners.*"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 655,
     "sourceId": 1252,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2321,
     "sourceId": 3919,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2894,
     "sourceId": 4877,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3491,
     "sourceId": 5624,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 1442,
     "sourceId": 8172,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 9366,
     "sourceId": 13206,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 179555,
     "sourceId": 403916,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 4549,
     "sourceId": 466349,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 2478,
     "sourceId": 1151655,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 10128,
     "sourceId": 5438389,
     "sourceType": "datasetVersion"
    }
   ],
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.113527,
   "end_time": "2024-09-28T03:50:07.326084",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-28T03:50:00.212557",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
